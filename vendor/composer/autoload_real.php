<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInitc61ff82cbf0142a401a48a8161e1595a
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    /**
     * @return \Composer\Autoload\ClassLoader
     */
    public static function getLoader()
    {
        // 首先，代码检查 '$loader' 静态变量是否已经存在，如果存在就直接返回
        if (null !== self::$loader) {
            return self::$loader;
        }

// 加载并执行 'platform_check.php' 文件，该文件用于检查当前运行环境是否满足 Composer 的要求
        require __DIR__ . '/platform_check.php';

// 调用 'spl_autoload_register' 函数注册 "ComposerAutoloaderInitc61ff82cbf0142a401a48a8161e1595a" 类的 'loadClassLoader' 方法为自动加载函数
        spl_autoload_register(array('ComposerAutoloaderInitc61ff82cbf0142a401a48a8161e1595a', 'loadClassLoader'), true, true);

// 实例化 "ClassLoader" 并将其赋值给 '$loader' 变量和静态变量 'self::$loader'
        self::$loader = $loader = new \Composer\Autoload\ClassLoader(\dirname(__DIR__));

// 使用 'spl_autoload_unregister' 函数取消注册 "ComposerAutoloaderInitc61ff82cbf0142a401a48a8161e1595a" 类的 'loadClassLoader' 方法
        spl_autoload_unregister(array('ComposerAutoloaderInitc61ff82cbf0142a401a48a8161e1595a', 'loadClassLoader'));

// 加载并执行 'autoload_static.php' 文件，该文件主要负责加载 Composer 为了提高性能而静态生成的类映射
        require __DIR__ . '/autoload_static.php';

// 调用 ComposerStaticInit 类的 'getInitializer' 方法，该方法返回一个可以初始化 '$loader' 的回调函数，然后该回调函数被执行
        call_user_func(\Composer\Autoload\ComposerStaticInitc61ff82cbf0142a401a48a8161e1595a::getInitializer($loader));

// 使用 ClassLoader 的 'register' 方法注册自动加载函数
        $loader->register(true);

// ComposerStaticInit 类的静态属性 '$files' 包含需要被加载的文件列表
        $filesToLoad = \Composer\Autoload\ComposerStaticInitc61ff82cbf0142a401a48a8161e1595a::$files;

// 定义一个闭包函数，用于加载文件
        $requireFile = \Closure::bind(static function ($fileIdentifier, $file) {
            if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
                $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;

                // 加载文件
                require $file;
            }
        }, null, null);

// 遍历 '$filesToLoad'，使用以上定义的闭包函数加载每个文件
        foreach ($filesToLoad as $fileIdentifier => $file) {
            $requireFile($fileIdentifier, $file);
        }

// 返回 ClassLoader 实例
        return $loader;
    }
}
